from math import floor
from html import escape
from random import choice
from asyncio import sleep
from .. import loader, utils
from datetime import timedelta
from urllib.parse import quote_plus
from telethon.tl.types import Message
from telethon import events, functions, types, sync
from telethon.tl.functions.users import GetFullUserRequest
from telethon.errors.rpcerrorlist import UsernameOccupiedError
from telethon.tl.functions.account import UpdateProfileRequest, UpdateUsernameRequest
import asyncio, datetime, inspect, io, json, logging, os, threading, time, random, re, requests, urllib.parse

#requires: urllib requests

logger = logging.getLogger(__name__)
types_of = ['femdom', 'tickle', 'classic', 'ngif', 'erofeet', 'meow', 'erok', 'poke', 'les', 'hololewd', 'lewdk', 'keta', 'feetg', 'nsfw_neko_gif', 'eroyuri', 'kiss', '_8ball', 'kuni', 'tits', 'pussy_jpg', 'cum_jpg', 'pussy', 'lewdkemo', 'lizard', 'slap', 'lewd', 'cum', 'cuddle', 'spank', 'smallboobs', 'goose',
'Random_hentai_gif', 'avatar', 'fox_girl', 'nsfw_avatar', 'hug', 'gecg', 'boobs', 'pat', 'feet', 'smug', 'kemonomimi', 'solog', 'holo', 'wallpaper', 'bj', 'woof', 'yuri', 'trap', 'anal', 'baka', 'blowjob', 'holoero', 'feed', 'neko', 'gasm', 'hentai', 'futanari', 'ero', 'solo', 'waifu', 'pwankg', 'eron', 'erokemo']

def chunks(lst, n):
    return [lst[i:i + n] for i in range(0, len(lst), n)]

def register(cb):
    cb(KramikkMod())

@loader.tds
class KramikkMod(loader.Module):
    """–ê–ª–∏–Ω–∞, —è –ª—é–±–ª—é —Ç–µ–±—è!"""
    answers = { 0:("–ù–µ–≤–Ω—è—Ç–µ–Ω –≤–æ–ø—Ä–æ—Å, —Ö–∑, —á—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å",),
        1:("–û—Ç–≤–µ—Ç —Ç–µ–±–µ –∏–∑–≤–µ—Å—Ç–µ–Ω", "–¢—ã –∑–Ω–∞–µ—à—å –ª—É—á—à–µ –º–µ–Ω—è!", "–û—Ç–≤–µ—Ç —É–±–∏–ª!.."),
        2:("–î–∞", "–£—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç", "–ê–≥–∞"),
        3:("–î–∞, –Ω–æ –µ—Å—Ç—å –ø–æ–º–µ—Ö–∏", "–ú–æ–∂–µ—Ç –±—ã—Ç—å", "–í–µ—Ä–æ—è—Ç–Ω–æ", "–í–æ–∑–º–æ–∂–Ω–æ", "–ù–∞–≤–µ—Ä–Ω—è–∫–∞"),
        4:("–ó–Ω–∞—é –æ—Ç–≤–µ—Ç, –Ω–æ –Ω–µ —Å–∫–∞–∂—É", "–î—É–º–∞–π!", "–£–≥–∞–¥–∞–π-–∫–∞...", "–≠—Ç–æ –∑–∞–≥–∞–¥–∫–∞ –æ—Ç –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ..."),
        5:("–ù–µ—Ç", "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"),
        6:("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", "–ö–æ–Ω–µ—á–Ω–æ", "–°—Ç–æ –ø—É–¥–æ–≤", "–ê–±—Å–æ–ª—é—Ç–Ω–æ", "–†–∞–∑—É–º–µ–µ—Ç—Å—è", "100%"),
        7:("–ï—Å—Ç—å –ø–æ–º–µ—Ö–∏...", "–í—Ä—è–¥ –ª–∏", "–ß—Ç–æ-—Ç–æ –ø–æ–º–µ—à–∞–µ—Ç", "–ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ"),
        8:("–î–∞, –Ω–æ –Ω–µ—Å–∫–æ—Ä–æ", "–î–∞, –Ω–æ –Ω–µ —Å–µ–π—á–∞—Å!"),
        9:("–ù–µ—Ç, –Ω–æ –ø–æ–∫–∞", "–°–∫–æ—Ä–æ!", "–ñ–¥–∏!", "–ü–æ–∫–∞ –Ω–µ—Ç")}
    strings = {
        'name': 'Kramikk',
        'loading': '<b>Loading...</b>',
        'update': '<b>–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∞–Ω–æ–≤</b>',
        "name_not_found": "<u>–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è, –∏—Å–ø—Ä–∞–≤—å —ç—Ç–æ:</u>\n <code>.kblname %name%</code>",
        "name_set": "<u>–ò–º—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</u>",
        "quest_not_found": "<u>–ê–≥–¥–µ –≤–æ–ø—Ä–æ—Å?</u>",
        "quest_answer": "\n\n<u>%answer%</u>",
        "mention": "<a href='tg://user?id=%id%'>%name%</a>",
    }

    def __init__(self):
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        ans = (await utils.run_sync(requests.get, 'https://nekos.life/api/v2/endpoints')).json()
        clans = {
            '–ë–∞–≥oboty' : -1001380664241,
            '–¢–æ–º –†—ç–¥–¥–ª' : -1001441941681,
            '–ú–∞–Ω—É–ª—ã –∏ –ó–∞–π—á–∞—Ç–∫–∏' : -1001289617428,
            '–ñ–∞–±–æ—Ç–æ—Ä—Ç' : -1001436786642,
            '–°–≤–æ—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞' : -1001485617300,
            '–ë–∞—Ä' : -1001465870466,
            '.' : -1001409792751,
            '–∂–∞–±–∫–∏ –Ω—ç–ª—Å(–ø–ª–∞—Ç–æ–Ω)' : -1001165420047,
            '–°—Ç–∞–Ω—Ü–∏—è' : -1001447960786,
            '–î–∏—Ä–∏–∂–∞–±–ª—å' : -1001264330106,
            '–°–∫–∞–∑–æ—á–Ω—ã–π –¥–æ–Ω–∞—Ç–µ—Ä' : -1001648008859,
            '–õ–∏—Å—Ç–∏–∫' : -1001685708710,
            '–ñ–∞–±—ã –∞—Ñ–µ—Ä–∏—Å—Ç—ã –ö—Ä–∞–º –∏ –±–∞–±—É—à–∫–∞' : -421815520,
            '–•—ç–ª–ª–æ –í–∏–Ω!' : -1001426018704,
            '–¢–∞–Ω—Ü—ã –ø–æ —Å—Ä–µ–¥–∞–º' : -1001481051409,
            'IELTS' : -1001492669520,
            '–î–æ–º–∏–∫ –≤ –±–æ–ª–æ—Ç–µ' : -1001520533176,
            '–ö–æ—Å–º–æ—Å –Ω–∞—Å –∂–¥–µ—Ç' : -1001460270560,
            'Forbidden Frog' : -1001511984124,
            'Vitoad' : -1001771130958,
            '–ö—É—Ä—Å—ã –≤—ã—à–∏–≤–∞–Ω–∏—è' : -1001760342148,
            '–ó–æ–ª–æ—Ç–∞—è –∂–∞–±–∞' : -1001787904496,
            'LSDtoads' : -1001493923839,
            '–¶—ã–≥–∞–Ω–∫–∞' : -1001714871513,
            '–∂–∞–±—ã –ª–µ–Ω–∞' : -1001419547228,
            '–ñ–∞–±–æ—á–∫–∞' : -1001666737591,
            'AstroFrog' : -1001575042525,
            '–ö–æ–Ω—Å–∏–ª–∏—É–º –∂–∞–±' : -1001777552705,
            '–ñ–∞–±—å–∏ –º–æ–Ω—Å—Ç—Ä–∏–∫–∏' : -1001427000422,
            '–ñ–∞–±—ã –í–µ—Ä–æ–Ω—ã' : -1001256439407,
            '–ñ–∞–±—å–∏ —Å–ø–µ—Ü–∏–∏' : -1001499700136,
            '–ë–æ–ª–æ—Ç–æ–∑–∞–≤—Ä' : -1001624280659,
            '–ñ–∞–±–æ–±–æ—Ç—Å—Ç–≤–æ' : -543554726,
        }
        self.categories = json.loads('[' + [_ for _ in ans if '/api' in _ and '/img/' in _][0].split('<')[1].split('>')[0].replace("'", '"') + ']')
        self.clans = clans
        self.client = client
        self.endpoints = {
            'img': 'https://nekos.life/api/v2/img/',
            'owoify': 'https://nekos.life/api/v2/owoify?text=',
            'why': 'https://nekos.life/api/v2/why',
            'cat': 'https://nekos.life/api/v2/cat',
            'fact': 'https://nekos.life/api/v2/fact'
        }
        self.db = db
        self.me = await client.get_me()
        self.status = db.get('Status', 'status', {})

    @loader.sudo
    async def delmecmd(self, message):
        chat = message.chat
        if chat:
            args = utils.get_args_raw(message)
            mag = await utils.answer(message, "<b>–ò—â—É —Å–æ–æ–±—â–µ–Ω–∏—è...</b>")
            all = (await self.client.get_messages(chat, from_user='me')).total
            await utils.answer(msg, f'<b>{all} —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ!</b>')
            messages = [msg async for msg in self.client.iter_messages(chat, from_user='me')]
            _ = ""
            async for msg in self.client.iter_messages(chat, from_user='me'):
                if _:
                    await msg.delete()
                else:
                    _ = "_"
            await message.delete()

    async def idcmd(self, message):
        reply = await message.get_reply_message()
        user = await message.client.get_entity(reply.sender_id)
        adjectives_start = ["—Ö–æ—Ä–æ—à–∏–π(-–∞—è)", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π(-–∞—è)", "–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π(-–∞—è)", "–¥–ª—è –º–µ–Ω—è –Ω—è—à–Ω—ã–π(-–∞—è)",
                            "–ø—ã—à–Ω—ã–π(-–∞—è)", "–∞–Ω–≥–µ–ª—å—Å–∫–∏–π(-–∞—è)", "–∞–ø–ø–µ—Ç–∏—Ç–Ω—ã–π(-–∞—è)", "–≥–∞—Ä–Ω—ã–π(-–∞—è)"]
        emojies = ["üê∂", "üê±", "üêπ", "üê£", "ü•™", "üçì", "‚ô•Ô∏è", "ü§ç", "ü™Ñ", "‚ú®", "ü¶πüèª", "üåä"]
        nouns = ["—á–µ–ª–æ–≤–µ–∫", "—É—á–∞—Å—Ç–Ω–∏–∫(-—Ü–∞) –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"]
        starts = ["–ù–µ —Ö–æ—á—É –¥–µ–ª–∞—Ç—å –ø–æ—Å–ø–µ—à–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤, –Ω–æ", "–Ø, –∫–æ–Ω–µ—á–Ω–æ, –Ω–µ –º–æ–≥—É —É—Ç–≤–µ—Ä–∂–¥–∞—Ç—å, –∏ —ç—Ç–æ –º–æ–µ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–µ –º–Ω–µ–Ω–∏–µ, –Ω–æ", "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ —Å–∏—Ç—É–∞—Ü–∏—é, —è –º–æ–≥—É –≤—ã—Å–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–µ –º–Ω–µ–Ω–∏–µ. –û–Ω–æ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ",
                  "–ù–µ –ø—ã—Ç–∞—è—Å—å –Ω–∏–∫–æ–≥–æ –æ—Å–∫–æ—Ä–±–∏—Ç—å, –∞ –ª–∏—à—å –≤—ã—Å–∫–∞–∑—ã–≤–∞—è —Å–≤–æ—é —Å–∫—Ä–æ–º–Ω—É—é —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ"]
        ends = ["!!!!", "!", "."]
        start = random.choice(starts)
        adjective_start = random.choice(adjectives_start)
        adjective_mid = random.choice(adjectives_start)
        noun = random.choice(nouns)
        end = random.choice(ends)
        emojie = random.choice(emojies)
        insult = emojie + "  " + start + " —Ç—ã ‚Äî " + adjective_start + " –∏ " + \
            adjective_mid + (" " if adjective_mid else "") + noun + end
        logger.debug(insult)
        await message.edit(f'{insult}\n\n'
                           f'–∏–º—è: <b>{user.first_name}</b>\n'
                           f'–∞–π–¥–∏: <b>{user.id}</b>\n'
                           f'—é–∑–µ—Ä: @{user.username}\n'
                           f'–∞–π–¥–∏ —á–∞—Ç–∞: <code>{reply.chat_id}</code>')

    @loader.unrestricted
    async def factcmd(self, message):
        """Did you know?"""
        await utils.answer(message, f"<b>üßê Did you know, that </b><code>{(await utils.run_sync(requests.get, self.endpoints['fact'])).json()['fact']}</code>")

    async def kblcmd(self, message):
        """–í—ã—Å—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        name = self.db.get("kbl", "name", None)
        if not name: return await message.edit(self.strings["name_not_found"].replace("%name%", escape(message.sender.first_name)))
        args = utils.get_args_raw(message)
        if not args: return await message.edit(self.strings["quest_not_found"])
        words = re.findall(r"\w+", f"{name} {args}")
        words_len = [words.__len__()] + [x.__len__() for x in words]
        i = words_len.__len__()
        while i > 1:
            i -= 1
            for x in range(i): words_len[x] = words_len[x] + words_len[x+1] - 9 if words_len[x] + words_len[x+1] > 9 else words_len[x] + words_len[x+1]
        return await message.edit(self.strings["mention"].replace('%id%', str(self.me.id)).replace('%name%', name)+':\n'
                                  +args+f'?\n\n{" |"*words_len[0]}'+self.strings["quest_answer"].replace("%answer%", choice(self.answers[words_len[0]])))

    async def kblnamecmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∏–∏–∏-–º—è –ª—é-–±–∏-–º–æ–µ —Ç–≤–æ—ë"""
        args = utils.get_args(message)
        await self.db.set("kbl", "name", ' '.join(args) if args else None)
        await message.edit(self.strings["name_set"])

    @loader.unrestricted
    async def meowcmd(self, message):
        """Sends cat ascii art"""
        await utils.answer(message, f"<b>{(await utils.run_sync(requests.get, self.endpoints['cat'])).json()['cat']}</b>")

    @loader.pm
    async def nekocmd(self, message):
        """Send anime pic"""
        args = utils.get_args_raw(message)
        args = 'neko' if args not in self.categories else args
        pic = (await utils.run_sync(requests.get, f"{self.endpoints['img']}{args}")).json()["url"]
        await self.client.send_file(message.peer_id, pic, reply_to=message.reply_to_msg_id)
        await message.delete()

    @loader.pm
    async def nekoctcmd(self, message):
        """Show available categories"""
        cats = '\n'.join([' | </code><code>'.join(_) for _ in chunks(self.categories, 5)])
        await utils.answer(message, f'<b>Available categories:</b>\n<code>{cats}</code>')

    @loader.owner
    async def nkcmd(self, m):
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≥–∏—Ñ\n–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è neko\n–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é(.nkct)"
        args = utils.get_args_raw(m)
        typ = None
        if args:
            if args in types_of:
                typ = args
        else:
            typ = "neko"
        if typ is None:
            return await m.edit('<b>–Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ</b>')
        await m.edit('<b>Mmm...</b>')
        reply = await m.get_reply_message()
        await m.client.send_file(m.to_id, requests.get(f'https://nekos.life/api/v2/img/{typ}').json()['url'], reply_to=reply.id if reply else None)
        await m.delete()
    async def nkctcmd(self, m):
        await m.edit('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n' + '\n'.join(f'<code>{i}</code>' for i in types_of))

    async def carboncmd(self, message):
        args = utils.get_args_raw(message)
        message = await utils.answer(message, self.strings('loading', message))
        try:
            message = message[0]
        except:
            pass
        url = 'https://carbonnowsh.herokuapp.com/?code=' + urllib.parse.quote_plus(args).replace('%0A', '%250A').replace('%23', '%2523').replace('%2F', '%252f')
        logger.info('[Carbon]: Fetching url ' + url)
        await self.client.send_message(utils.get_chat_id(message), file=requests.get(url).content)
        await message.delete()


    @loader.unrestricted
    async def owoifycmd(self, message):
        """OwOify text"""
        args = utils.get_args_raw(message)
        if not args:
            args = await message.get_reply_message()
            if not args:
                await message.delete()
                return

            args = args.text

        if len(args) > 180:
            message = await utils.answer(message, '<b>OwOifying...</b>')
            try:
                message = message[0]
            except: pass

        args = quote_plus(args)
        owo = ""
        for chunk in chunks(args, 180):
            owo += (await utils.run_sync(requests.get, f"{self.endpoints['owoify']}{chunk}")).json()['owo']
            await asyncio.sleep(0.1)
        await utils.answer(message, owo)

    async def watcher(self, message):
        bak = {1222132115, 1646740346, 1261343954, 1785723159, 1486632011, 1682801197, 1863720231, 1775420029, 1286303075, 1746686703, 1459363960, 1423368454, 547639600}
        chat = message.chat_id
        chatid= str(message.chat_id)
        chatik = -435123440
        duel = self.db.get('–î—É—ç–ª—å–∫–∞', 'duel', {})
        jb = "jaba"
        lvl = False
        name = self.me.first_name
        ninja = {-1001733976889, -1001745450607, -1001658628295}
        randelta = random.randint(3, 21+1)
        u = 0
        x = 0
        EK = {
            -1001441941681,
            -1001436786642,
            -1001380664241,
            -1001289617428,
            -1001485617300,
            -1001465870466,
            -1001447960786}
        KW = {-419726290, -1001543064221, -577735616, -1001493923839}

        if chat in ninja:
            if message.sender_id not in {1124824021}:
                if "–Ω–∞—á–∞—Ç—å –∫–ª–∞–Ω–æ–≤—É—é –≤–æ–π–Ω—É" in message.message.casefold():
                    aaa = ""
                    id = 904983
                    async with message.client.conversation(chat) as conv:
                        response = await conv.wait_event(events.NewMessage(incoming=True, from_users=1124824021, chats=message.chat_id))
                        if "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ —Ç–æ–ª—å–∫–æ" in response.text:
                            aaa =  f"<i>{message.sender.first_name} –≤ –ø–æ–∏—Å–∫–µ</i>"
                            rret = await self.client.get_messages(chatik, ids=id)
                            await rret.edit(aaa)
                    await message.client.send_message(chatik, aaa)
        except: pass
